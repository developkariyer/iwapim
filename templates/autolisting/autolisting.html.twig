{% extends 'base.html.twig' %}
{% block title %} Otomatik Listing {% endblock %}
{% block navbaritems %}{% endblock %}
{% block header %}{% endblock %}

{% block content %}
    <div class="container-fluid mt-4">
        <h1 class="text-center mb-4">Otomatik Listing Oluşturma</h1>

        <!-- Başarılı mesajlar -->
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endfor %}

        <div class="row">
            <div class="col-lg-12 mb-4">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Ürün Ara</h5>
                    </div>
                    <div class="card-body">
                        <div class="input-group mb-3">
                            <input type="text" id="productIdentifier" class="form-control" placeholder="Ürün Kodu (PIM Identifier) Girin" aria-label="Ürün Kodu">
                            <button class="btn btn-primary" type="button" id="searchBtn">
                                <i class="fas fa-search me-1"></i> Ara
                            </button>
                        </div>
                        <small class="text-muted">Ürün kodu kullanarak sistem üzerindeki varyantları arayabilirsiniz (Örn: CA-001A)</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sonuçlar ve Form Bölümü -->
        <div class="row" id="resultsContainer" style="display: none;">
            <!-- Yükleniyor göstergesi -->
            <div class="col-12" id="loadingSpinner">
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                    <p class="ms-3 mb-0">Arama sonuçları yükleniyor...</p>
                </div>
            </div>

            <!-- Hata mesajı -->
            <div class="col-12" id="errorMessage" style="display: none;">
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <span id="errorText">Bir hata oluştu.</span>
                </div>
            </div>

            <!-- Arama Sonuçları ve Form -->
            <div class="col-12" id="productForm" style="display: none;">
                <form id="autoListingForm">
                    <!-- Ürün Bilgileri -->
                    <div class="card mb-4">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Ürün Bilgileri</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <p><strong>Ürün Adı:</strong> <span id="productName">-</span></p>
                                    <input type="hidden" id="productId" name="productId">
                                </div>
                                <div class="col-md-4">
                                    <p><strong>Ürün Kodu:</strong> <span id="productIdentifierDisplay">-</span></p>
                                </div>
                                <div class="col-md-4">
                                    <p><strong>Kategori:</strong> <span id="productCategory">-</span></p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Varyant Seçimi -->
                    <div class="card mb-4">
                        <div class="card-header bg-info text-white">
                            <h5 class="mb-0">Varyant Seçimi</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="mb-0">Listinglenecek Varyantları Seçin</h6>
                                        <small class="text-muted">Her varyant için stok ve fiyat bilgilerini ayarlayabilirsiniz</small>
                                    </div>
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-secondary" id="selectAllVariantsBtn">
                                            <i class="fas fa-check-square me-1"></i> Tümünü Seç
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" id="deselectAllVariantsBtn">
                                            <i class="fas fa-square me-1"></i> Seçimi Kaldır
                                        </button>
                                    </div>
                                </div>

                                <!-- Toplu fiyat ve stok ayarı -->
                                <div class="row mb-3 p-2 bg-light border rounded">
                                    <div class="col-md-6 col-lg-3 mb-2 mb-lg-0">
                                        <label class="form-label small mb-1">Toplu Stok Ayarla</label>
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control" id="bulkStock" value="10" min="1">
                                            <button class="btn btn-outline-primary" type="button" id="applyBulkStock">
                                                <i class="fas fa-check"></i> Uygula
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-lg-3">
                                        <label class="form-label small mb-1">Toplu Fiyat Ayarla (TL)</label>
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control" id="bulkPrice" value="100" min="0.01" step="0.01">
                                            <button class="btn btn-outline-primary" type="button" id="applyBulkPrice">
                                                <i class="fas fa-check"></i> Uygula
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <!-- Varyant tablosu -->
                                <div class="table-responsive">
                                    <table class="table table-bordered table-hover">
                                        <thead class="table-light">
                                        <tr>
                                            <th style="width: 40px;">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="selectAllVariants">
                                                </div>
                                            </th>
                                            <th>IWASKU</th>
                                            <th>Renk</th>
                                            <th>Ebat</th>
                                            <th style="width: 100px;">Stok</th>
                                            <th style="width: 120px;">Fiyat (TL)</th>
                                        </tr>
                                        </thead>
                                        <tbody id="variantsTableBody">
                                        <!-- Varyantlar JavaScript ile buraya eklenecek -->
                                        </tbody>
                                    </table>
                                </div>
                                <div class="mt-2 d-flex justify-content-between align-items-center">
                                    <small class="text-muted" id="selectionInfo">0 varyant seçildi</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Pazaryeri Seçimi -->
                    <div class="card mb-4">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0">Pazaryeri Seçimi</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="marketplaceSelect" class="form-label">Ürünleri Listelemek İstediğiniz Pazaryerlerini Seçin</label>
                                <select class="form-select" id="marketplaceSelect" multiple size="3" required>
                                    <option value="ciceksepeti">Çiçeksepeti</option>
                                    <option value="trendyol">Trendyol</option>
                                    <option value="hepsiburada">Hepsiburada</option>
                                    <option value="n11">N11</option>
                                    <option value="amazon">Amazon</option>
                                </select>
                                <small class="form-text text-muted">Ctrl tuşu ile birden fazla seçim yapabilirsiniz.</small>
                            </div>

                            <!-- Marketplace-specific fields will be dynamically added here -->
                            <div id="marketplaceFields">
                                <!-- Dynamic content will be added by JavaScript -->
                            </div>
                        </div>
                    </div>

                    <!-- Form Gönderimi -->
                    <div class="d-flex justify-content-between mb-5">
                        <button type="button" class="btn btn-secondary" id="resetFormBtn">
                            <i class="fas fa-times me-1"></i> Formu Sıfırla
                        </button>
                        <button type="submit" class="btn btn-primary btn-lg" id="submitFormBtn" disabled>
                            <i class="fas fa-cloud-upload-alt me-1"></i> Listing İşlemini Başlat
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Form stileri */
        .card {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }

        .card-header {
            padding: 0.75rem 1.25rem;
        }

        /* Tablo stilleri */
        .table th, .table td {
            vertical-align: middle;
        }

        /* Seçili satır vurgusu */
        tr.selected-row {
            background-color: rgba(0,123,255,0.1);
        }

        /* Resposive düzenlemeler */
        @media (max-width: 767.98px) {
            .table-responsive {
                max-height: 400px;
                overflow-y: auto;
            }

            .btn-group {
                display: flex;
                width: 100%;
                margin-top: 0.5rem;
            }

            .btn-group .btn {
                flex: 1;
            }
        }

        /* Loading spinner */
        .spinner-border {
            width: 1.5rem;
            height: 1.5rem;
        }
    </style>
{% endblock %}

{% block body_scripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM element references
            const productIdentifierInput = document.getElementById('productIdentifier');
            const searchBtn = document.getElementById('searchBtn');
            const resultsContainer = document.getElementById('resultsContainer');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const errorMessage = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');
            const productForm = document.getElementById('productForm');
            const productNameEl = document.getElementById('productName');
            const productIdEl = document.getElementById('productId');
            const productIdentifierDisplay = document.getElementById('productIdentifierDisplay');
            const productCategoryEl = document.getElementById('productCategory');
            const variantsTableBody = document.getElementById('variantsTableBody');
            const selectionInfo = document.getElementById('selectionInfo');
            const selectAllVariants = document.getElementById('selectAllVariants');
            const selectAllVariantsBtn = document.getElementById('selectAllVariantsBtn');
            const deselectAllVariantsBtn = document.getElementById('deselectAllVariantsBtn');
            const bulkStock = document.getElementById('bulkStock');
            const bulkPrice = document.getElementById('bulkPrice');
            const applyBulkStock = document.getElementById('applyBulkStock');
            const applyBulkPrice = document.getElementById('applyBulkPrice');
            const marketplaceSelect = document.getElementById('marketplaceSelect');
            const marketplaceFields = document.getElementById('marketplaceFields');
            const submitFormBtn = document.getElementById('submitFormBtn');
            const resetFormBtn = document.getElementById('resetFormBtn');
            const autoListingForm = document.getElementById('autoListingForm');

            // State variables
            let selectedMarketplaces = [];
            let marketplaceCategories = {
                // Çiçeksepeti için sunucu tarafından gelen kategorileri kullan
                ciceksepeti: {{ ciceksepeticCategories|json_encode|raw }}
            };
            let variantData = [];
            let variantAttributes = {}; // Her pazaryeri ve varyant için attribute'ları saklayacak nesne

            // Event listeners
            searchBtn.addEventListener('click', searchProduct);
            productIdentifierInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    searchProduct();
                }
            });

            selectAllVariants.addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.variant-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                    toggleRowSelection(checkbox);
                });
                updateSelectionCounter();
                updateSubmitButton();
            });

            selectAllVariantsBtn.addEventListener('click', function() {
                selectAllVariants.checked = true;
                const event = new Event('change');
                selectAllVariants.dispatchEvent(event);
            });

            deselectAllVariantsBtn.addEventListener('click', function() {
                selectAllVariants.checked = false;
                const event = new Event('change');
                selectAllVariants.dispatchEvent(event);
            });

            applyBulkStock.addEventListener('click', function() {
                const stockValue = bulkStock.value;
                const selectedCheckboxes = document.querySelectorAll('.variant-checkbox:checked');
                selectedCheckboxes.forEach(checkbox => {
                    const row = checkbox.closest('tr');
                    const stockInput = row.querySelector('.variant-stock');
                    if (stockInput) stockInput.value = stockValue;
                });
            });

            applyBulkPrice.addEventListener('click', function() {
                const priceValue = bulkPrice.value;
                const selectedCheckboxes = document.querySelectorAll('.variant-checkbox:checked');
                selectedCheckboxes.forEach(checkbox => {
                    const row = checkbox.closest('tr');
                    const priceInput = row.querySelector('.variant-price');
                    if (priceInput) priceInput.value = priceValue;
                });
            });

            marketplaceSelect.addEventListener('change', function() {
                selectedMarketplaces = Array.from(this.selectedOptions).map(option => option.value);
                updateMarketplaceFields();
                updateSubmitButton();
            });

            resetFormBtn.addEventListener('click', resetForm);

            autoListingForm.addEventListener('submit', function(e) {
                e.preventDefault();
                submitForm();
            });

            // Functions
            function searchProduct() {
                const identifier = productIdentifierInput.value.trim();

                if (!identifier) {
                    alert('Lütfen bir ürün kodu girin');
                    return;
                }

                // UI sıfırlama ve yükleniyor göstergesi
                resetResultsUI();
                resultsContainer.style.display = 'block';
                loadingSpinner.style.display = 'block';

                // API isteği
                fetch(`/api/products/search/${encodeURIComponent(identifier)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        loadingSpinner.style.display = 'none';

                        if (data.success && data.product) {
                            displayProductInfo(data.product);
                            productForm.style.display = 'block';
                        } else {
                            showError(data.message || 'Ürün bulunamadı');
                        }
                    })
                    .catch(error => {
                        console.error('API Error:', error);
                        loadingSpinner.style.display = 'none';
                        showError(`İstek sırasında bir hata oluştu: ${error.message}`);
                    });
            }

            function resetResultsUI() {
                errorMessage.style.display = 'none';
                productForm.style.display = 'none';
                variantsTableBody.innerHTML = '';
                productIdEl.value = '';
                productNameEl.textContent = '-';
                productIdentifierDisplay.textContent = '-';
                productCategoryEl.textContent = '-';
                marketplaceSelect.selectedIndex = -1;
                selectedMarketplaces = [];
                marketplaceFields.innerHTML = '';
                submitFormBtn.disabled = true;
            }

            function showError(message) {
                errorText.textContent = message;
                errorMessage.style.display = 'block';
            }

            function displayProductInfo(product) {
                // Store variant data for later use
                variantData = product.variants || [];

                // Ürün bilgilerini doldur
                productIdEl.value = product.id || '';
                productNameEl.textContent = product.name || 'İsimsiz Ürün';
                productIdentifierDisplay.textContent = productIdentifierInput.value.trim();
                productCategoryEl.textContent = product.productCategory || '-';

                // Varyantları tabloya ekle
                variantsTableBody.innerHTML = '';

                if (variantData.length > 0) {
                    variantData.forEach(variant => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>
                                <div class="form-check">
                                    <input class="form-check-input variant-checkbox" type="checkbox"
                                           value="${variant.id || ''}"
                                           data-iwasku="${variant.iwasku || ''}"
                                           data-color="${variant.variationColor || ''}"
                                           data-size="${variant.variationSize || ''}">
                                </div>
                            </td>
                            <td>${variant.iwasku || '-'}</td>
                            <td>${variant.variationColor || '-'}</td>
                            <td>${variant.variationSize || '-'}</td>
                            <td>
                                <input type="number" class="form-control form-control-sm variant-stock"
                                       min="1" value="10" name="variants[${variant.id}][stock]">
                            </td>
                            <td>
                                <input type="number" class="form-control form-control-sm variant-price"
                                       min="0.01" step="0.01" value="100" name="variants[${variant.id}][price]">
                            </td>
                        `;
                        variantsTableBody.appendChild(row);

                        // Varyant checkbox olayını dinle
                        const checkbox = row.querySelector('.variant-checkbox');
                        checkbox.addEventListener('change', function() {
                            toggleRowSelection(this);
                            updateSelectionCounter();
                            updateSubmitButton();

                            // Varyant seçildiğinde ve pazaryerleri de seçiliyse, ilgili attribute'ları güncelle
                            if (this.checked && selectedMarketplaces.length > 0) {
                                selectedMarketplaces.forEach(marketplace => {
                                    const categorySelect = document.getElementById(`${marketplace}_category`);
                                    if (categorySelect && categorySelect.value) {
                                        loadAttributesForCategory(marketplace, categorySelect.value);
                                    }
                                });
                            }
                        });
                    });
                }

                // Sayaçları güncelle
                updateSelectionCounter();
            }

            function toggleRowSelection(checkbox) {
                const row = checkbox.closest('tr');
                if (checkbox.checked) {
                    row.classList.add('selected-row');
                } else {
                    row.classList.remove('selected-row');
                }
            }

            function updateSelectionCounter() {
                const selectedCount = document.querySelectorAll('.variant-checkbox:checked').length;
                const totalCount = document.querySelectorAll('.variant-checkbox').length;

                selectionInfo.textContent = `${selectedCount} / ${totalCount} varyant seçildi`;

                // "Tümünü seç" checkbox'ını güncelle
                selectAllVariants.checked = selectedCount === totalCount && totalCount > 0;
                selectAllVariants.indeterminate = selectedCount > 0 && selectedCount < totalCount;
            }

            function updateMarketplaceFields() {
                marketplaceFields.innerHTML = '';

                if (selectedMarketplaces.length === 0) return;

                // Seçili pazaryeri kutularını oluştur
                selectedMarketplaces.forEach(marketplace => {
                    const fieldset = document.createElement('fieldset');
                    fieldset.className = 'border p-3 mt-4 rounded';

                    let title, bgColor;
                    switch (marketplace) {
                        case 'ciceksepeti':
                            title = 'Çiçeksepeti Ayarları';
                            bgColor = 'primary';
                            break;
                        case 'trendyol':
                            title = 'Trendyol Ayarları';
                            bgColor = 'warning';
                            break;
                        case 'hepsiburada':
                            title = 'Hepsiburada Ayarları';
                            bgColor = 'danger';
                            break;
                        case 'n11':
                            title = 'N11 Ayarları';
                            bgColor = 'success';
                            break;
                        case 'amazon':
                            title = 'Amazon Ayarları';
                            bgColor = 'dark';
                            break;
                        default:
                            title = `${marketplace.charAt(0).toUpperCase() + marketplace.slice(1)} Ayarları`;
                            bgColor = 'secondary';
                    }

                    fieldset.innerHTML = `
                        <legend class="w-auto px-2 fs-5 text-${bgColor}">
                            <i class="fas fa-store me-1"></i> ${title}
                        </legend>

                        <div class="mb-3">
                            <label for="${marketplace}_category" class="form-label">Kategori</label>
                            <select class="form-select marketplace-category"
                                    id="${marketplace}_category"
                                    name="marketplaceFields[${marketplace}][category]"
                                    data-marketplace="${marketplace}"
                                    required>
                                <option value="">Kategori Seçin</option>
                            </select>
                        </div>

                        <div id="${marketplace}_attributes_container" class="marketplace-attributes-container mt-4">
                            <!-- Kategori seçildiğinde attribute'lar burada gösterilecek -->
                        </div>
                    `;

                    marketplaceFields.appendChild(fieldset);

                    // Kategori seçimini doldur
                    populateCategorySelect(marketplace);

                    // Kategori değişim olayını dinle
                    const categorySelect = fieldset.querySelector(`.marketplace-category`);
                    categorySelect.addEventListener('change', function() {
                        const marketplace = this.getAttribute('data-marketplace');
                        const categoryId = this.value;

                        if (categoryId) {
                            loadAttributesForCategory(marketplace, categoryId);
                        } else {
                            // Kategori seçilmediğinde attribute alanlarını temizle
                            document.getElementById(`${marketplace}_attributes_container`).innerHTML = '';
                        }

                        updateSubmitButton();
                    });
                });
            }

            function populateCategorySelect(marketplace) {
                const categorySelect = document.getElementById(`${marketplace}_category`);

                if (!categorySelect) return;

                // Mevcut kategorileri temizle
                categorySelect.innerHTML = '<option value="">Kategori Seçin</option>';

                // Pazaryerine göre kategorileri doldur
                if (marketplace === 'ciceksepeti' && marketplaceCategories.ciceksepeti) {
                    // Çiçeksepeti için controller'dan gelen kategorileri kullan
                    marketplaceCategories.ciceksepeti.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                } else {
                    // Diğer pazaryerleri için API'den kategorileri yükle
                    categorySelect.innerHTML = '<option value="">Kategoriler yükleniyor...</option>';
                    categorySelect.disabled = true;

                    // API'den ilgili pazaryeri için kategorileri al
                    fetch(`/api/categories/${marketplace}`)
                        .then(response => response.json())
                        .then(data => {
                            categorySelect.innerHTML = '<option value="">Kategori Seçin</option>';

                            if (data.categories && Array.isArray(data.categories)) {
                                data.categories.forEach(category => {
                                    const option = document.createElement('option');
                                    option.value = category.id;
                                    option.textContent = category.name;
                                    categorySelect.appendChild(option);
                                });

                                // Kategorileri kaydet
                                marketplaceCategories[marketplace] = data.categories;
                            }

                            categorySelect.disabled = false;
                        })
                        .catch(error => {
                            console.error(`Kategori yükleme hatası (${marketplace}):`, error);
                            categorySelect.innerHTML = '<option value="">Kategoriler yüklenemedi</option>';
                            categorySelect.disabled = false;
                        });
                }
            }

            function loadAttributesForCategory(marketplace, categoryId) {
                const attributesContainer = document.getElementById(`${marketplace}_attributes_container`);

                if (!attributesContainer) return;

                // Seçili varyantları al
                const selectedVariants = getSelectedVariants();

                if (selectedVariants.length === 0) {
                    attributesContainer.innerHTML = `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Lütfen önce en az bir varyant seçin
                        </div>
                    `;
                    return;
                }

                // Attribute yükleme göstergesi
                attributesContainer.innerHTML = `
                    <div class="d-flex justify-content-center my-3">
                        <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                        <p class="mb-0">Kategori özellikleri yükleniyor...</p>
                    </div>
                `;

                // Pazaryeri ve kategori için attribute'ları al
                fetch(`/api/marketplace/${marketplace}/category/${categoryId}/attributes`)
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            throw new Error(data.message || 'Özellikler alınamadı');
                        }

                        // Her varyant için form oluştur
                        createAttributeForms(marketplace, categoryId, selectedVariants, data.attributes || []);
                    })
                    .catch(error => {
                        console.error('Attribute yükleme hatası:', error);

                        // Hata durumunda manuel giriş alanları göster
                        attributesContainer.innerHTML = `
                            <div class="alert alert-info mb-4">
                                <i class="fas fa-info-circle me-2"></i>
                                Bu kategori için önceden tanımlanmış özellikler bulunamadı. Lütfen gerekli özellikleri manuel olarak girin.
                            </div>

                            <div class="mb-3">
                                <h6 class="mb-3">Varyant Özellikleri</h6>
                            </div>
                        `;

                        // Seçili varyantlar için manuel giriş formları
                        createManualAttributeForms(marketplace, categoryId, selectedVariants);
                    });
            }

            function createAttributeForms(marketplace, categoryId, variants, attributes) {
                const attributesContainer = document.getElementById(`${marketplace}_attributes_container`);

                if (!attributesContainer || !attributes || attributes.length === 0) {
                    // Özellik yoksa manuel giriş formları göster
                    createManualAttributeForms(marketplace, categoryId, variants);
                    return;
                }

                attributesContainer.innerHTML = `
                    <h6 class="mb-3">Kategori Özellikleri</h6>
                    <p class="text-muted small mb-3">Bu kategori için pazaryeri tarafından istenen özellikler aşağıdadır. Seçtiğiniz her varyant için bu özellikleri doldurun.</p>
                `;

                // Her varyant için bir kart oluştur
                variants.forEach(variant => {
                    const variantCard = document.createElement('div');
                    variantCard.className = 'card mb-3';

                    let variantFormContent = `
                        <div class="card-header bg-light">
                            <h6 class="mb-0">
                                ${variant.iwasku || 'Varyant'}
                                <span class="ms-2 badge bg-secondary">
                                    ${variant.color || '-'} / ${variant.size || '-'}
                                </span>
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                    `;

                    // Her özellik için bir form alanı oluştur
                    attributes.forEach(attr => {
                        variantFormContent += `
                            <div class="col-md-6">
                                <label class="form-label">${attr.name}${attr.required ? ' *' : ''}</label>
                        `;

                        if (attr.type === 'select' && attr.options) {
                            // Select dropdown
                            variantFormContent += `
                                <select class="form-select form-select-sm attribute-field"
                                        name="marketplaceFields[${marketplace}][variants][${variant.id}][${attr.id}]"
                                        ${attr.required ? 'required' : ''}>
                                    <option value="">Seçin</option>
                            `;

                            attr.options.forEach(option => {
                                // Renk veya ebat ile eşleşiyorsa otomatik seç
                                let selected = '';

                                if (attr.name.toLowerCase() === 'renk' && option.toLowerCase() === variant.color.toLowerCase()) {
                                    selected = 'selected';
                                } else if ((attr.name.toLowerCase() === 'ebat' || attr.name.toLowerCase() === 'boyut') &&
                                    option.toLowerCase() === variant.size.toLowerCase()) {
                                    selected = 'selected';
                                }

                                variantFormContent += `<option value="${option}" ${selected}>${option}</option>`;
                            });

                            variantFormContent += `</select>`;
                        } else {
                            // Text input
                            // Renk veya ebat ile eşleşiyorsa otomatik doldur
                            let value = '';

                            if (attr.name.toLowerCase() === 'renk') {
                                value = variant.color;
                            } else if (attr.name.toLowerCase() === 'ebat' || attr.name.toLowerCase() === 'boyut') {
                                value = variant.size;
                            }

                            variantFormContent += `
                                <input type="${attr.type === 'number' ? 'number' : 'text'}"
                                       class="form-control form-control-sm attribute-field"
                                       name="marketplaceFields[${marketplace}][variants][${variant.id}][${attr.id}]"
                                       value="${value}"
                                       ${attr.required ? 'required' : ''}>
                            `;
                        }

                        variantFormContent += `</div>`;
                    });

                    variantFormContent += `
                            </div>
                        </div>
                    `;

                    variantCard.innerHTML = variantFormContent;
                    attributesContainer.appendChild(variantCard);
                });

                // Form alanları değişikliklerini dinle
                document.querySelectorAll('.attribute-field').forEach(field => {
                    field.addEventListener('change', updateSubmitButton);
                });

                updateSubmitButton();
            }

            function createManualAttributeForms(marketplace, categoryId, variants) {
                const attributesContainer = document.getElementById(`${marketplace}_attributes_container`);

                if (!attributesContainer) return;

                // Container içeriğini sıfırla
                if (!attributesContainer.querySelector('.alert')) {
                    attributesContainer.innerHTML = `
                        <div class="alert alert-info mb-4">
                            <i class="fas fa-info-circle me-2"></i>
                            Önceden tanımlanmış özellikler bulunamadı. Lütfen gerekli özellikleri manuel olarak girin.
                        </div>
                    `;
                }

                // Temel özellikler - her varyant için manuel giriş
                const basicAttrs = [
                    { id: 'name', name: 'Ürün Adı', type: 'text', required: true },
                    { id: 'description', name: 'Açıklama', type: 'textarea', required: true },
                    { id: 'brand', name: 'Marka', type: 'text', required: true },
                    { id: 'warranty', name: 'Garanti Süresi (Ay)', type: 'number', required: false }
                ];

                // Her varyant için form oluştur
                const variantsContainer = document.createElement('div');
                variantsContainer.className = 'variant-attributes-container';

                variants.forEach(variant => {
                    const variantCard = document.createElement('div');
                    variantCard.className = 'card mb-3';

                    let variantFormContent = `
                        <div class="card-header bg-light">
                            <h6 class="mb-0">
                                ${variant.iwasku || 'Varyant'}
                                <span class="ms-2 badge bg-secondary">
                                    ${variant.color || '-'} / ${variant.size || '-'}
                                </span>
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                    `;

                    // Her özellik için bir form alanı oluştur
                    basicAttrs.forEach(attr => {
                        variantFormContent += `
                            <div class="col-md-6">
                                <label class="form-label">${attr.name}${attr.required ? ' *' : ''}</label>
                        `;

                        if (attr.type === 'textarea') {
                            variantFormContent += `
                                <textarea class="form-control form-control-sm attribute-field"
                                          name="marketplaceFields[${marketplace}][variants][${variant.id}][${attr.id}]"
                                          rows="3"
                                          ${attr.required ? 'required' : ''}></textarea>
                            `;
                        } else {
                            variantFormContent += `
                                <input type="${attr.type}"
                                       class="form-control form-control-sm attribute-field"
                                       name="marketplaceFields[${marketplace}][variants][${variant.id}][${attr.id}]"
                                       ${attr.required ? 'required' : ''}>
                            `;
                        }

                        variantFormContent += `</div>`;
                    });

                    // Özel özellik ekleme butonu
                    variantFormContent += `
                            </div>
                            <div class="mt-3">
                                <button type="button" class="btn btn-sm btn-outline-primary add-custom-attribute-btn"
                                        data-marketplace="${marketplace}"
                                        data-variant="${variant.id}">
                                    <i class="fas fa-plus me-1"></i> Özel Özellik Ekle
                                </button>
                                <div class="custom-attributes-container-${variant.id} mt-2">
                                    <!-- Özel özellikler buraya eklenecek -->
                                </div>
                            </div>
                        </div>
                    `;

                    variantCard.innerHTML = variantFormContent;
                    variantsContainer.appendChild(variantCard);
                });

                attributesContainer.appendChild(variantsContainer);

                // Özel özellik ekleme butonlarını dinle
                document.querySelectorAll('.add-custom-attribute-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const marketplace = this.getAttribute('data-marketplace');
                        const variantId = this.getAttribute('data-variant');
                        addCustomAttributeField(marketplace, variantId);
                    });
                });

                // Form alanları değişikliklerini dinle
                document.querySelectorAll('.attribute-field').forEach(field => {
                    field.addEventListener('change', updateSubmitButton);
                });

                updateSubmitButton();
            }

            function addCustomAttributeField(marketplace, variantId) {
                const container = document.querySelector(`.custom-attributes-container-${variantId}`);

                if (!container) return;

                const customAttrRow = document.createElement('div');
                customAttrRow.className = 'row g-2 mt-2 custom-attribute-row';

                // Unique ID oluştur
                const attrId = 'custom_' + Date.now();

                customAttrRow.innerHTML = `
                    <div class="col-5">
                        <input type="text" class="form-control form-control-sm"
                               placeholder="Özellik Adı"
                               name="marketplaceFields[${marketplace}][variants][${variantId}][custom_names][]" required>
                    </div>
                    <div class="col-5">
                        <input type="text" class="form-control form-control-sm attribute-field"
                               placeholder="Değer"
                               name="marketplaceFields[${marketplace}][variants][${variantId}][custom_values][]" required>
                    </div>
                    <div class="col-2">
                        <button type="button" class="btn btn-sm btn-outline-danger remove-custom-attr-btn">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;

                container.appendChild(customAttrRow);

                // Silme butonunu dinle
                const removeBtn = customAttrRow.querySelector('.remove-custom-attr-btn');
                removeBtn.addEventListener('click', function() {
                    customAttrRow.remove();
                    updateSubmitButton();
                });

                // Form alanı değişikliğini dinle
                const attributeField = customAttrRow.querySelector('.attribute-field');
                attributeField.addEventListener('change', updateSubmitButton);

                updateSubmitButton();
            }

            function getSelectedVariants() {
                const selectedVariants = [];
                const checkboxes = document.querySelectorAll('.variant-checkbox:checked');

                checkboxes.forEach(checkbox => {
                    selectedVariants.push({
                        id: checkbox.value,
                        iwasku: checkbox.getAttribute('data-iwasku') || '',
                        color: checkbox.getAttribute('data-color') || '',
                        size: checkbox.getAttribute('data-size') || ''
                    });
                });

                return selectedVariants;
            }

            function updateSubmitButton() {
                const selectedVariants = document.querySelectorAll('.variant-checkbox:checked').length;
                const selectedMarketplacesCount = selectedMarketplaces.length;
                let allCategoriesSelected = true;
                let allRequiredFieldsFilled = true;

                // Tüm pazaryerleri için kategori seçilmiş mi kontrol et
                selectedMarketplaces.forEach(marketplace => {
                    const categorySelect = document.getElementById(`${marketplace}_category`);
                    if (categorySelect && !categorySelect.value) {
                        allCategoriesSelected = false;
                    }
                });

                // Tüm zorunlu alanlar doldurulmuş mu kontrol et
                const requiredFields = document.querySelectorAll('.attribute-field[required]');
                requiredFields.forEach(field => {
                    if (!field.value) {
                        allRequiredFieldsFilled = false;
                    }
                });

                // Buton durumunu güncelle
                submitFormBtn.disabled = !(
                    selectedVariants > 0 &&
                    selectedMarketplacesCount > 0 &&
                    allCategoriesSelected &&
                    allRequiredFieldsFilled
                );
            }

            function resetForm() {
                productIdentifierInput.value = '';
                resetResultsUI();
                resultsContainer.style.display = 'none';
                variantData = [];
                variantAttributes = {};
            }

            function submitForm() {
                // Form verilerini topla
                const formData = new FormData(autoListingForm);
                const productId = productIdEl.value;

                // Seçili varyantları topla
                const selectedVariants = [];
                document.querySelectorAll('.variant-checkbox:checked').forEach(checkbox => {
                    const row = checkbox.closest('tr');
                    const variantId = checkbox.value;
                    const stockInput = row.querySelector('.variant-stock');
                    const priceInput = row.querySelector('.variant-price');

                    selectedVariants.push({
                        id: variantId,
                        iwasku: checkbox.getAttribute('data-iwasku') || '',
                        color: checkbox.getAttribute('data-color') || '',
                        size: checkbox.getAttribute('data-size') || '',
                        stock: stockInput?.value || 0,
                        price: priceInput?.value || 0
                    });
                });

                // API request data
                const requestData = {
                    productId: productId,
                    productName: productNameEl.textContent,
                    productIdentifier: productIdentifierDisplay.textContent,
                    productCategory: productCategoryEl.textContent,
                    selectedMarketplaces: selectedMarketplaces,
                    variants: selectedVariants,
                    marketplaceFields: {}
                };

                // Pazaryeri özel alanlarını ve attribute verilerini ekle
                selectedMarketplaces.forEach(marketplace => {
                    const categorySelect = document.getElementById(`${marketplace}_category`);

                    if (categorySelect) {
                        requestData.marketplaceFields[marketplace] = {
                            category: categorySelect.value,
                            variants: {}
                        };

                        // Her varyant için attribute verilerini ekle
                        selectedVariants.forEach(variant => {
                            requestData.marketplaceFields[marketplace].variants[variant.id] = {};

                            // Standart attribute'ları topla
                            const attributeFields = document.querySelectorAll(
                                `[name^="marketplaceFields[${marketplace}][variants][${variant.id}]"]:not([name*="custom_"])`
                            );

                            attributeFields.forEach(field => {
                                // Attribute ID'sini adından çıkar
                                const matches = field.name.match(/\[([^\]]+)\]$/);
                                if (matches && matches[1]) {
                                    const attrId = matches[1];
                                    requestData.marketplaceFields[marketplace].variants[variant.id][attrId] = field.value;
                                }
                            });

                            // Özel attribute'ları topla
                            const customNames = document.querySelectorAll(
                                `[name="marketplaceFields[${marketplace}][variants][${variant.id}][custom_names][]"]`
                            );
                            const customValues = document.querySelectorAll(
                                `[name="marketplaceFields[${marketplace}][variants][${variant.id}][custom_values][]"]`
                            );

                            if (customNames.length > 0 && customNames.length === customValues.length) {
                                requestData.marketplaceFields[marketplace].variants[variant.id].custom_attributes = [];

                                for (let i = 0; i < customNames.length; i++) {
                                    requestData.marketplaceFields[marketplace].variants[variant.id].custom_attributes.push({
                                        name: customNames[i].value,
                                        value: customValues[i].value
                                    });
                                }
                            }
                        });
                    }
                });

                // Yükleniyor durumu
                const originalBtnText = submitFormBtn.innerHTML;
                submitFormBtn.disabled = true;
                submitFormBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> İşleniyor...';

                console.log('Form verisi:', requestData);

                // Form verilerini API'ye gönder
                fetch('/create-marketplace-listing', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Başarılı yanıt, sayfayı yenile ve başarı mesajı göster
                            alert('Listing işlemi başarıyla başlatıldı!');
                            window.location.href = window.location.pathname + '?success=true';
                        } else {
                            // Hata durumunda
                            alert(`Hata: ${data.message || 'Bir sorun oluştu'}`);
                            submitFormBtn.disabled = false;
                            submitFormBtn.innerHTML = originalBtnText;
                        }
                    })
                    .catch(error => {
                        console.error('Form submission error:', error);
                        alert(`Bir hata oluştu: ${error.message}`);
                        submitFormBtn.disabled = false;
                        submitFormBtn.innerHTML = originalBtnText;
                    });
            }
        });
    </script>
{% endblock %}
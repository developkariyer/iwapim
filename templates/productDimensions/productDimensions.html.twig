{% extends 'base.html.twig' %}
{% block title %} Product Dimensions Management {% endblock %}
{% block navbaritems %}{% endblock %}
{% block header %}{% endblock %}

{% block content %}
    <div class="container-fluid mt-4">
        <h1 class="text-center mb-4">Ürün Boyutları Yönetimi</h1>

        <!-- Filtreleme Formu -->
        <div class="card mb-4">
            <div class="card-header bg-light">
                <h5 class="mb-0">Filtreler</h5>
            </div>
            <div class="card-body">
                <form id="filterForm" class="row g-3">
                    <div class="col-md-6 col-lg-3">
                        <label for="category" class="form-label">Kategori</label>
                        <select class="form-select" id="category" name="category">
                            <option value="">Tüm Kategoriler</option>
                            {% for cat in categories|default([]) %}
                                <option value="{{ cat }}" {% if app.request.query.get('category') == cat %}selected{% endif %}>{{ cat }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-md-6 col-lg-3">
                        <label for="packageStatus" class="form-label">Boyut Durumu</label>
                        <select class="form-select" id="packageStatus" name="packageStatus">
                            <option value="">Tümü</option>
                            <option value="with-dimensions" {% if app.request.query.get('packageStatus') == 'with-dimensions' %}selected{% endif %}>Boyutlu</option>
                            <option value="without-dimensions" {% if app.request.query.get('packageStatus') == 'without-dimensions' %}selected{% endif %}>Boyutsuz</option>
                        </select>
                    </div>
                    <div class="col-md-6 col-lg-3">
                        <label for="iwasku" class="form-label">IWA SKU</label>
                        <input type="text" class="form-control" id="iwasku" name="iwasku" value="{{ app.request.query.get('iwasku') }}">
                    </div>
                    <div class="col-md-6 col-lg-3 mt-auto">
                        <button type="submit" class="btn btn-primary w-100">Filtrele</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Arama Formu -->
        <div class="card mb-4">
            <div class="card-header bg-light">
                <h5 class="mb-0">Arama</h5>
            </div>
            <div class="card-body">
                <form id="searchForm" class="row g-3">
                    <div class="col-md-9">
                        <input type="text" class="form-control" id="globalSearch" name="search" placeholder="Ürün adı, SKU, beden veya renk ile ara..." value="{{ app.request.query.get('search') }}">
                    </div>
                    <div class="col-md-3">
                        <button type="submit" class="btn btn-success w-100">Ara</button>
                    </div>
                </form>
            </div>
        </div>

        {% if products is defined and products|length > 0 %}
            <!-- Tablo içi hızlı arama -->
            <div class="row mb-3">
                <div class="col-md-6 col-lg-4">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" id="tableSearch" placeholder="Tabloda görünür satırlarda ara...">
                    </div>
                    <small class="text-muted">Tablodaki görünür satırlar içinde anlık arama yapar</small>
                </div>
            </div>

            <div class="table-responsive">
                <table id="productTable" class="table table-striped table-bordered table-hover">
                    <thead class="thead-dark">
                    <tr>
                        <th class="d-none">ID</th>
                        <th class="sortable" data-sort="name">Ürün Adı</th>
                        <th class="sortable" data-sort="iwasku">IWA SKU</th>
                        <th class="sortable" data-sort="size">Beden</th>
                        <th class="sortable" data-sort="color">Renk</th>
                        <th class="sortable" data-sort="category">Kategori</th>
                        <th class="sortable" data-sort="weight">Ağırlık</th>
                        <th class="sortable" data-sort="width">Genişlik</th>
                        <th class="sortable" data-sort="length">Uzunluk</th>
                        <th class="sortable" data-sort="height">Yükseklik</th>
                        <th class="sortable" data-sort="desi">Desi5000</th>
                        <th>İşlemler</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for product in products %}
                        <tr data-product-id="{{ product.id }}">
                            <td class="d-none">{{ product.id }}</td>
                            <td>{{ product.name }}</td>
                            <td>{{ product.iwasku }}</td>
                            <td>{{ product.variationSize }}</td>
                            <td>{{ product.variationColor }}</td>
                            <td>
                                <input type="text" class="form-control form-control-sm editable-field"
                                       data-field="wsCategory" value="{{ product.wsCategory }}" />
                            </td>
                            <td>
                                <input type="number" step="0.01" class="form-control form-control-sm editable-field"
                                       data-field="weight" value="{{ product.weight }}"
                                       placeholder="Ağırlık" />
                            </td>
                            <td>
                                <input type="number" step="0.01" class="form-control form-control-sm editable-field"
                                       data-field="width" value="{{ product.width }}"
                                       placeholder="Genişlik" />
                            </td>
                            <td>
                                <input type="number" step="0.01" class="form-control form-control-sm editable-field"
                                       data-field="length" value="{{ product.length }}"
                                       placeholder="Uzunluk" />
                            </td>
                            <td>
                                <input type="number" step="0.01" class="form-control form-control-sm editable-field"
                                       data-field="height" value="{{ product.height }}"
                                       placeholder="Yükseklik" />
                            </td>
                            <td>
                                <input type="number" step="0.01" class="form-control form-control-sm editable-field"
                                       data-field="desi5000" value="{{ product.desi5000 }}"
                                       placeholder="Desi5000" />
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary save-dimensions">Kaydet</button>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-3 flex-wrap">
                <div class="mb-2 mb-md-0">
                    Toplam: <strong>{{ total }}</strong> ürün
                </div>
                <nav>
                    <ul class="pagination pagination-sm flex-wrap">
                        {% set totalPages = (total / pageSize)|round(0, 'ceil') %}
                        {% set startPage = max(1, page - 2) %}
                        {% set endPage = min(totalPages, page + 2) %}

                        {% if page > 1 %}
                            <li class="page-item">
                                <a class="page-link" href="#" data-page="1">&laquo;</a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="#" data-page="{{ page - 1 }}">&lsaquo;</a>
                            </li>
                        {% endif %}

                        {% for i in startPage..endPage %}
                            <li class="page-item {% if i == page %}active{% endif %}">
                                <a class="page-link" href="#" data-page="{{ i }}">{{ i }}</a>
                            </li>
                        {% endfor %}

                        {% if page < totalPages %}
                            <li class="page-item">
                                <a class="page-link" href="#" data-page="{{ page + 1 }}">&rsaquo;</a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="#" data-page="{{ totalPages }}">&raquo;</a>
                            </li>
                        {% endif %}
                    </ul>
                </nav>
            </div>
        {% else %}
            <div class="alert alert-info text-center">
                Arama kriterlerine uygun ürün bulunamadı.
            </div>
        {% endif %}
    </div>

    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div id="successToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-success text-white">
                <strong class="me-auto">Başarılı</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                Değişiklikler başarıyla kaydedildi.
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .table th, .table td {
            vertical-align: middle;
        }
        .form-control-sm {
            height: calc(1.5em + 0.5rem + 2px);
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
        .editable-field.changed {
            background-color: #fff3cd;
        }
        .editable-field:invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        .sortable {
            cursor: pointer;
            position: relative;
        }
        .sortable:after {
            content: '↕';
            opacity: 0.4;
            margin-left: 5px;
        }
        .sortable.asc:after {
            content: '↑';
            opacity: 1;
        }
        .sortable.desc:after {
            content: '↓';
            opacity: 1;
        }

        @media (max-width: 768px) {
            .table-responsive {
                overflow-x: auto;
            }
            .form-control-sm {
                font-size: 14px;
            }
            .btn-sm {
                padding: 0.25rem 0.4rem;
                font-size: 0.75rem;
            }
        }
    </style>
{% endblock %}

{% block body_scripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var successToast = new bootstrap.Toast(document.getElementById('successToast'), {
                delay: 3000
            });
            document.querySelectorAll('.pagination .page-link').forEach(function(link) {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const page = this.getAttribute('data-page');
                    const currentUrl = new URL(window.location.href);
                    currentUrl.searchParams.set('page', page);
                    window.location.href = currentUrl.toString();
                });
            });
            document.getElementById('tableSearch').addEventListener('keyup', function() {
                const searchText = this.value.toLowerCase();
                const table = document.getElementById('productTable');
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(function(row) {
                    const text = row.textContent.toLowerCase();
                    if (text.includes(searchText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
            document.querySelectorAll('.sortable').forEach(function(header) {
                header.addEventListener('click', function() {
                    const table = document.getElementById('productTable');
                    const columnIndex = Array.from(this.parentElement.children).indexOf(this);
                    const rows = Array.from(table.querySelectorAll('tbody tr'));
                    const sortDirection = this.classList.contains('asc') ? -1 : 1;
                    document.querySelectorAll('.sortable').forEach(function(h) {
                        h.classList.remove('asc', 'desc');
                    });
                    this.classList.add(sortDirection === 1 ? 'asc' : 'desc');
                    rows.sort(function(rowA, rowB) {
                        const cellA = rowA.cells[columnIndex].textContent.trim();
                        const cellB = rowB.cells[columnIndex].textContent.trim();
                        if (!isNaN(cellA) && !isNaN(cellB)) {
                            return (parseFloat(cellA) - parseFloat(cellB)) * sortDirection;
                        } else {
                            return cellA.localeCompare(cellB) * sortDirection;
                        }
                    });
                    const tbody = table.querySelector('tbody');
                    while (tbody.firstChild) {
                        tbody.removeChild(tbody.firstChild);
                    }
                    rows.forEach(function(row) {
                        tbody.appendChild(row);
                    });
                });
            });
            document.querySelectorAll('.editable-field').forEach(function(input) {
                const originalValue = input.value;

                input.addEventListener('change', function() {
                    if (this.value !== originalValue) {
                        this.classList.add('changed');
                    } else {
                        this.classList.remove('changed');
                    }
                });
            });
            document.querySelectorAll('.save-dimensions').forEach(function(button) {
                button.addEventListener('click', function() {
                    const row = this.closest('tr');
                    const productId = row.getAttribute('data-product-id');
                    const updatedData = {id: productId};
                    let hasChanges = false;
                    row.querySelectorAll('.editable-field').forEach(function(input) {
                        if (input.classList.contains('changed')) {
                            const fieldName = input.getAttribute('data-field');
                            updatedData[fieldName] = input.value;
                            hasChanges = true;
                        }
                    });
                    if (hasChanges) {
                        console.log('Ürün güncelleme verileri:', JSON.stringify(updatedData));
                        successToast.show();
                        row.querySelectorAll('.editable-field.changed').forEach(function(input) {
                            input.classList.remove('changed');
                        });
                    } else {
                        alert('Değişiklik yapılmadı.');
                    }
                });
            });
            document.getElementById('filterForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.delete('page');
                currentUrl.searchParams.delete('search');
                const formData = new FormData(this);
                for (const [key, value] of formData.entries()) {
                    if (value) {
                        currentUrl.searchParams.set(key, value);
                    } else {
                        currentUrl.searchParams.delete(key);
                    }
                }

                window.location.href = currentUrl.toString();
            });
            document.getElementById('searchForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.delete('page');
                const searchValue = document.getElementById('globalSearch').value;
                if (searchValue) {
                    currentUrl.searchParams.set('search', searchValue);
                } else {
                    currentUrl.searchParams.delete('search');
                }
                window.location.href = currentUrl.toString();
            });
        });
    </script>
{% endblock %}
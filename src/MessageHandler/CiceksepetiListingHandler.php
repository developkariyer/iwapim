<?php
namespace App\MessageHandler;


use App\Connector\Gemini\GeminiConnector;
use App\Connector\Marketplace\CiceksepetiConnector;
use App\Message\ProductListingMessage;
use App\Model\DataObject\Marketplace;
use App\Model\DataObject\Product;
use App\Model\DataObject\VariantProduct;
use App\Utils\Utility;
use Exception;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;
use Symfony\Component\HttpClient\HttpClient;
use App\MessageHandler\ListingHelperService;
use Psr\Log\LoggerInterface;
use App\Logger\LoggerFactory;

#[AsMessageHandler(fromTransport: 'ciceksepeti')]
class CiceksepetiListingHandler
{
    private LoggerInterface $logger;
    public function __construct(ListingHelperService $listingHelperService)
    {
        $this->listingHelper = $listingHelperService;
        $this->logger = LoggerFactory::create('ciceksepeti','auto_listing');
    }

    /**
     * @throws Exception
     */
    public function __invoke(ProductListingMessage $message): void
    {
        sleep(5);
        $traceId = $message->getTraceId();
        echo "Ciceksepeti Listing Handler\n";
        $this->logger->info("üöÄ [Listing Started] Automated product listing process started Ciceksepeti | Trace ID: {$traceId}");
        $categories = $this->getCiceksepetiCategoriesDetails();
        echo "ciceksepeti categories fetched\n";
        $this->logger->info("‚úÖ [Category Data] Ciceksepeti category details successfully retrieved.");
        $jsonString = $this->listingHelper->getPimListingsInfo($message);
        $products = json_decode($jsonString, true);
        $groupedSizes = [];
        $sizeLabels = ['M', 'L', 'XL', '2XL', '3XL', '4XL'];
        foreach ($products as $product) {
            $identifier = $product['mainProductCode'];
            $size = $product['size'];

            if (!isset($groupedSizes[$identifier])) {
                $groupedSizes[$identifier] = [];
            }

            if (!in_array($size, $groupedSizes[$identifier])) {
                $groupedSizes[$identifier][] = $size;
            }
        }
        $sizeToLabelMap = [];
        foreach ($groupedSizes as $identifier => $sizes) {
            foreach ($sizes as $i => $size) {
                $label = $sizeLabels[$i] ?? 'CUSTOM';
                $sizeToLabelMap[$identifier][$size] = $label;
            }
        }
        foreach ($products as &$product) {
            $identifier = $product['mainProductCode'];
            $size = $product['size'];
            $product['sizeLabel'] = $sizeToLabelMap[$identifier][$size] ?? 'CUSTOM';
        }

        print_r($products);
        $html = "<strong>√ñl√ß√ºler:</strong><ul>";
        $seenSizes = [];
        foreach ($products as $product) {
            $key = $product['size'] . '‚áí' . $product['sizeLabel'];
            if (!in_array($key, $seenSizes)) {
                $seenSizes[] = $key;
                $html .= "<li>{$product['size']} ‚áí {$product['sizeLabel']}</li>";
            }
        }

        $html .= "</ul>";

        echo $html;
//        $this->printProductInfoLogger($jsonString);
//        $this->logger->info("‚úÖ [PIM Listings] PIM listings information successfully completed.");
//        $messageType = $message->getActionType();
//        $this->logger->info("üìù [Action Type] Processing action of type: {$messageType}");
//        match ($messageType) {
//            'list' => $this->processListingData($jsonString, $categories),
//            default => throw new \InvalidArgumentException("Unknown Action Type: $messageType"),
//        };
    }

    private function printProductInfoLogger(string $jsonString): void
    {
        $jsonData = json_decode($jsonString, true);
        if (is_array($jsonData)) {
            foreach ($jsonData as $product) {
                $productName = $product['productName'] ?? 'Unknown';
                $mainProductCode = $product['mainProductCode'] ?? 'Unknown';
                $stockCode = $product['stockCode'] ?? 'Unknown';
                $size = $product['size'] ?? 'Unknown';
                $color = $product['color'] ?? 'Unknown';

                $this->logger->info("‚úÖ [Product Info] Product: {$productName}, MainProductCode: {$mainProductCode}, StockCode: {$stockCode}, Size: {$size}, Color: {$color}");
            }
        } else {
            $this->logger->error("‚ùå [PIM Data Error] PIM data is invalid or missing.");
        }
    }

    private function processListingData($jsonString, $categories)
    {
        $fullData = json_decode($jsonString, true);
        if (!$fullData) {
            $this->logger->error("‚ùå [Invalid JSON] Invalid JSON data received: " . $jsonString);
            return;
        }
        $chunks = array_chunk($fullData, 2);
        $mergedResults = [];
        $totalChunks = count($chunks);
        $this->logger->info("‚úÖ [Chunks Processed] Total chunks to process: {$totalChunks}");
        foreach ($chunks as $index => $chunkData) {
            $chunkNumber = $index + 1;
            $this->logger->info("üîÑ [Chunk Processing] Processing chunk {$chunkNumber} / {$totalChunks}...");
            echo "\nüîÑ Chunk {$chunkNumber} / {$totalChunks} processing...\n";
            $chunkJsonString = json_encode(['products' => $chunkData], JSON_UNESCAPED_UNICODE);
            $prompt = $this->generateListingPrompt($chunkJsonString, $categories);
            $result = GeminiConnector::chat($prompt, 'ciceksepeti');
            $parsedResult = $this->parseGeminiResult($result);
            if (!$parsedResult) {
                $this->logger->error("Gemini result is empty or error gemini api");
                echo "‚ö†Ô∏è Error: Chunk {$chunkNumber} / {$totalChunks} result is empty or error gemini api \n";
                continue;
            }
            foreach ($parsedResult as $updateData) {
                foreach ($chunkData as &$product) {
                    if ($product['stockCode'] === $updateData['stockCode']) {
                        $product['categoryId'] = $updateData['categoryId'] ?? $product['categoryId'];
                        $product['size'] = $updateData['size'] ?? $product['size'];
                        $product['color'] = $updateData['color'] ?? $product['color'];
                    }
                }
            }
            unset($product);
            $mergedResults = array_merge($mergedResults, $chunkData);
            echo "‚úÖ Gemini result success. Chunk {$chunkNumber} complated.\n";
            $this->logger->info("‚úÖ [Gemini Success] Gemini result success. Chunk {$chunkNumber} completed.");
            sleep(5);
        }
        $this->logger->info("Gemini chat result : " . json_encode($mergedResults, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
        $data = $this->fillAttributeData($mergedResults);
        if (empty($data)) {
            $this->logger->error("‚ùå [No Data] No products found in the data array.");
            return [];
        }
        foreach ($data as $sku => $product) {
            if (isset($product['Attributes']) && empty($product['Attributes'])) {
                $this->logger->info("‚ùå [Attributes Empty] Attributes is empty for SKU: {$product['stockCode']}");
            } else {
                $this->logger->info("‚úîÔ∏è [Attributes Found] Attributes filled for SKU: {$product['stockCode']}");
            }
        }
        $this->logger->info("‚úÖ [Filled Attributes Data] All attributes data processed: " . json_encode($data, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
        $formattedData = $this->fillMissingListingDataAndFormattedCiceksepetiListing($data);
        print_r($formattedData);
        $this->logger->info("‚úÖ [Formatted Data]: " . $formattedData);
        $ciceksepetiConnector = new CiceksepetiConnector(Marketplace::getById(265384));
        $result = $ciceksepetiConnector->createListing($formattedData);
        $this->logger->info("‚úÖ [CiceksepetiConnector] Result batch:\n" . json_encode($result, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
        print_r($result);
    }

    private function fillMissingListingDataAndFormattedCiceksepetiListing($data): false|string
    {
        $data = $this->removeCommonAttributes($data);
        $formattedData = [];
        $seenAttributes = [];
        foreach ($data as $sku => $product) {
            $salesPrice = $product['salesPrice'] ?? 0;
            $attributes = $product['Attributes'] ?? null;
            $description = $product['description'];
            $stockCode = $product['stockCode'] ?? 'UNKNOWN';
            $hasValidPrice = $salesPrice !== 0 && $salesPrice !== "0";
            $hasAttributes = $attributes !== null;
            $hasValidDescription = mb_strlen($description) >= 30;
            if (!$hasValidPrice) {
                $this->logger->error("‚ùå [Validation Error] Invalid or missing sales price for SKU: {$stockCode}");
            }
            if (!$hasAttributes) {
                $this->logger->error("‚ùå [Validation Error] Missing attributes for SKU: {$stockCode}");
            }
            if (!$hasValidDescription) {
                $this->logger->error("‚ùå [Validation Error] Description too short (<30 chars) for SKU: {$stockCode}");
            }

            if (!$hasValidPrice || !$hasAttributes || !$hasValidDescription) {
                continue;
            }
            $attributesKey = json_encode($attributes, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
            if (isset($seenAttributes[$attributesKey])) {
                $this->logger->info("üîÅ [Duplicate Skipped] SKU: {$stockCode} - Attributes already processed.");
                continue;
            }
            $seenAttributes[$attributesKey] = true;
            $description = str_replace("\n", "<br>", $description);
            $description = str_replace(['\/', '\"', '\\\\', '\\n', '\\r', '\\t'], ['/', '"', '\\', "\n", "\r", "\t"], $description);
            $description = preg_replace_callback('/\\\\u([0-9a-fA-F]{4})/', function ($matches) {
                return mb_convert_encoding(pack('H*', $matches[1]), 'UTF-8', 'UTF-16BE');
            }, $description);
            $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
            $formattedProduct = [
                'productName' => mb_strlen($product['productName']) > 255
                    ? mb_substr($product['productName'], 0, 255)
                    : $product['productName'],
                'mainProductCode' => $product['mainProductCode'],
                'stockCode' => $stockCode,
                'categoryId' => $product['categoryId'],
                'description' => mb_strlen($description) > 20000
                    ? mb_substr($description, 0, 20000)
                    : $description,
                'deliveryMessageType' => $product['deliveryMessageType'],
                'deliveryType' => $product['deliveryType'],
                'stockQuantity' => $product['stockQuantity'],
                'salesPrice' => $product['salesPrice'],
                'images' => $product['images'],
                'Attributes' => $product['Attributes'],
            ];
            $formattedData['products'][] = $formattedProduct;
            $this->logger->info("‚úÖ [Formatted] Product ready for listing ‚ûú SKU: {$stockCode}");
        }
        $result = json_encode($formattedData, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        if ($result === false) {
            $this->logger->error("‚ùå [JSON Encode Error] Failed to encode formatted listing data.");
            return false;
        }
        $this->logger->info("üì¶ [Listing Data Ready] " . count($formattedData['products']) . " product(s) formatted for √ái√ßeksepeti listing.");
        return $result;
    }

    private function removeCommonAttributes($data): array
    {
        $valueIdCount = [];
        $totalProducts = count($data);
        foreach ($data as $product) {
            if (!isset($product['Attributes']) || empty($product['Attributes'])) {
                continue;
            }
            foreach ($product['Attributes'] as $attribute) {
                $valueId = $attribute['ValueId'];
                $valueIdCount[$valueId] = ($valueIdCount[$valueId] ?? 0) + 1;
            }
        }
        $commonValueIds = array_filter($valueIdCount, function ($count) use ($totalProducts) {
            return $count === $totalProducts;
        });
        foreach ($data as &$product) {
            if (!isset($product['Attributes']) || empty($product['Attributes'])) {
                continue;
            }
            $product['Attributes'] = array_filter($product['Attributes'], function ($attribute) use ($commonValueIds) {
                return !isset($commonValueIds[$attribute['ValueId']]);
            });
            $product['Attributes'] = array_values($product['Attributes']);
            if (empty($product['Attributes'])) {
                $product['Attributes'] = [];
            }
        }
        return $data;
    }

    private function parseGeminiResult($result)
    {
        $json = $result['candidates'][0]['content']['parts'][0]['text'] ?? '';
        $json = preg_replace('/[\x00-\x1F\x7F]/u', '', $json);
        $data = json_decode($json, true);
        return (json_last_error() === JSON_ERROR_NONE) ? $data : null;
    }

    private function generateListingPrompt($jsonString, $categories): string
    {
        return <<<EOD
            Sen bir e-ticaret uzmanƒ±sƒ±n ve √ái√ßekSepeti pazaryeri i√ßin √ºr√ºn listeleri hazƒ±rlƒ±yorsun. 
            **√áƒ±kƒ±≈ü formatƒ±**:  
            Sadece a≈üaƒüƒ±daki gibi bir JSON d√∂nd√ºr:
            {
              {
                "stockCode": AAA11
                "categoryId": 111,
                "color": "Renk bilgisi",
                "size": "Ebat bilgisi"
              },
              {
                ...
              }
            }
            Hi√ßbir a√ßƒ±klama, kod bloƒüu, yorum ekleme.  
            Sadece ge√ßerli, d√ºzg√ºn bir JSON √ºret.
            Bu JSON'da eksik alan olan kategoriyi verdiƒüim kategori bilgilerine g√∂re bulmanƒ± istiyorum.
            G√∂nderdiƒüim veri de stockCode yer almaktadƒ±r √ßƒ±ktƒ± formatƒ±nda bunu kullanacaksƒ±n.
           
            -**categoryId**: Kategori verisinden en uygun kategoriyi bul id sini al ve kaydet

            -**renk**: 
                - renk bilgisi verideki color fieldƒ± T√ºrk√ße ye √ßevir √ßevirdiƒüinde √ßi√ßeksepetinde bulunan √ßok bilinen renklerden olsun Eƒüer iki renk varsa her iki rengi de √ßevir, teke d√º≈ü√ºrme iki rengide √∂rneƒüin:
                - Altƒ±n, G√ºm√º≈ü, Turkuaz, Kƒ±rmƒ±zƒ±, Mavi, Bordo, Turuncu, Ye≈üil, Sarƒ±, Pembe, F√ºme, Kamuflaj, Kahverengi, Mor, Bej, Lacivert, Metal, Lila, Haki, Taba, Beyaz, Magenta, M√ºrd√ºm, Karƒ±≈üƒ±k, Gri,
                Antrasit, A√ßƒ±k Mavi, Bakƒ±r, Vi≈üne, A√ßƒ±k Pembe, Bronz, Ekru, Ta≈ü renklerinden kullan 2 renk varsa ikiside bunlara uyumlu olsun aralarƒ±nda bo≈üluk olsun.
                Renk √∂rnekleri:
                    Mixed => Karƒ±≈üƒ±k,
                    Tuana => Siyah-Antrasit,
                    Bet√ºl => A√ßƒ±k Me≈üe,
                    Dark Brown => Kahverengi,
                    Light Brown => Ceviz,
                    Karƒ±≈üƒ±k Bordo => Bordo-Siyah,
                    Karƒ±≈üƒ±k Gold => Mavi-Altƒ±n,
                    Karƒ±≈üƒ±k Gri => Siyah-Gri-Beyaz,
                    Crimson => Kƒ±rmƒ±zƒ±,
                    Navy => Mavi,
                    Sage => Ye≈üil,
                    Nimbus => Gri,
                    Terracotta => Turuncu,
                    Soil => Kahverengi,
                    Shiny Silver => G√ºm√º≈ü-Sarƒ±,
                    Shiny Gold => Sarƒ± Altƒ±n,
                    Shiny Copper => Bakƒ±r- Altƒ±n,


            -**ebat**: ebat bilgisi verideki size fieldƒ± cm olarak al (√∂rn: 250cm) yanƒ±nda boyut belirten S-M-XL gibi durum varsa bunu alma.
            
            **Veri formatƒ±**: L√ºtfen yalnƒ±zca a≈üaƒüƒ±daki **JSON verisini** kullanƒ±n ve dƒ±≈üarƒ±ya √ßƒ±kmayƒ±n. √áƒ±kƒ±≈üƒ±nƒ±zƒ± bu veriye dayalƒ± olarak olu≈üturun:
            ƒ∞≈üte veri: $jsonString
            Kategori Verisi: $categories
        EOD;
    }

    /**
     * Fill attribute data for products with category-specific attributes
     *
     * @param array $data Product data from Gemini
     * @return array The product data with filled attributes
     */
    public function fillAttributeData(array $data): array
    {
        if (empty($data)) {
            $this->logger->error("‚ùå [Empty Data] No product data provided to fill attributes");
            return [];
        }
        foreach ($data as $sku => &$product) {
            $this->logger->info("üîµ [Product Processing] IWASKU: {$product['stockCode']}");
            if (empty($product['categoryId'])) {
                $this->logger->error("‚ùå [Missing CategoryId] Product {$product['stockCode']} has no category ID");
                continue;
            }
            $categoryInfo = $this->getCategoryInfo($product['categoryId']);
            if (!$categoryInfo) {
                continue;
            }
            $variantAttributes = $this->getVariantAttributes($product['categoryId']);
            if (empty($variantAttributes['color']) && empty($variantAttributes['size'])) {
                continue;
            }
            $product['Attributes'] = $this->buildProductAttributes(
                $product,
                $variantAttributes
            );
        }
        return $data;
    }

    /**
     * Get category information by ID
     *
     * @param int $categoryId The category ID
     * @return array|null Category data or null if not found
     */
    private function getCategoryInfo(int $categoryId): ?array
    {
        $categorySql = "SELECT category_name FROM iwa_ciceksepeti_categories WHERE id = :categoryId";
        $categoryData = Utility::fetchFromSql($categorySql, ['categoryId' => $categoryId]);
        if (empty($categoryData)) {
            $this->logger->error("‚ùå [Category Error] Category not found for categoryId: {$categoryId}");
            return null;
        }
        $categoryName = $categoryData[0]['category_name'] ?? null;
        $this->logger->info("‚úÖ [Category Found] CategoryId: {$categoryId}, Name: {$categoryName}");
        return [
            'id' => $categoryId,
            'name' => $categoryName
        ];
    }

    /**
     * Get variant attributes (color and size) for a category
     *
     * @param int $categoryId The category ID
     * @return array Array with color and size attribute information
     */
    private function getVariantAttributes(int $categoryId): array
    {
        $result = [
            'color' => null,
            'size' => null
        ];
        $attributeColorSql = "SELECT attribute_id, attribute_name FROM iwa_ciceksepeti_category_attributes 
                          WHERE category_id = :categoryId 
                          AND type = 'Variant √ñzelliƒüi' 
                          AND attribute_name = 'Renk' 
                          LIMIT 1";
        $colorData = Utility::fetchFromSql($attributeColorSql, ['categoryId' => $categoryId]);
        if (!empty($colorData)) {
            $result['color'] = [
                'id' => $colorData[0]['attribute_id'],
                'name' => $colorData[0]['attribute_name']
            ];
            $this->logger->info("‚úÖ [Color Attribute] Found: ID: {$result['color']['id']}, Name: {$result['color']['name']}");
        } else {
            $this->logger->error("‚ùå [Color Attribute] Not found for categoryId: {$categoryId}");
        }
        $attributeSizeSql = "SELECT attribute_id, attribute_name FROM iwa_ciceksepeti_category_attributes 
                         WHERE category_id = :categoryId 
                         AND type = 'Variant √ñzelliƒüi' 
                         AND (attribute_name = 'Ebat' OR attribute_name = 'Boyut' OR attribute_name = 'Beden') 
                         LIMIT 1";
        $sizeData = Utility::fetchFromSql($attributeSizeSql, ['categoryId' => $categoryId]);
        if (!empty($sizeData)) {
            $result['size'] = [
                'id' => $sizeData[0]['attribute_id'],
                'name' => $sizeData[0]['attribute_name']
            ];
            $this->logger->info("‚úÖ [Size Attribute] Found: ID: {$result['size']['id']}, Name: {$result['size']['name']}");
        } else {
            $this->logger->error("‚ùå [Size Attribute] Not found for categoryId: {$categoryId}");
        }
        return $result;
    }

    /**
     * Build product attributes array from variant data
     *
     * @param array $product Product data
     * @param array $variantAttributes Available variant attributes
     * @return array Array of product attributes
     */
    private function buildProductAttributes(array $product, array $variantAttributes): array
    {
        $attributes = [];
        if (!empty($variantAttributes['color']) && isset($product['color']) && !empty(trim($product['color']))) {
            $colorAttrId = $variantAttributes['color']['id'];
            $colorValue = trim($product['color']);
            $bestColorMatch = $this->findBestAttributeMatch($colorAttrId, $colorValue, false);
            if ($bestColorMatch) {
                $attributes[] = [
                    'id' => $colorAttrId,
                    'ValueId' => $bestColorMatch['attribute_value_id'],
                    'TextLength' => 0
                ];
                $this->logger->info("‚úÖ [Color Match] Found: {$bestColorMatch['name']} (ID: {$bestColorMatch['attribute_value_id']})");
            } else {
                $this->logger->error("‚ùå [Color Match] Not found for value: {$colorValue}");
            }
        }
        if (!empty($variantAttributes['size']) && isset($product['size']) && !empty(trim($product['size']))) {
            $sizeAttrId = $variantAttributes['size']['id'];
            $sizeValue = trim($product['size']);
            $bestSizeMatch = $this->findBestAttributeMatch($sizeAttrId, $sizeValue, true);

            if ($bestSizeMatch) {
                $attributes[] = [
                    'id' => $sizeAttrId,
                    'ValueId' => $bestSizeMatch['attribute_value_id'],
                    'TextLength' => 0
                ];
                $this->logger->info("‚úÖ [Size Match] Found: {$bestSizeMatch['name']} (ID: {$bestSizeMatch['attribute_value_id']})");
            } else {
                $this->logger->error("‚ùå [Size Match] Not found for value: {$sizeValue}");
            }
        }
        if (empty($attributes)) {
            $this->logger->warning("‚ö†Ô∏è [No Attributes] No attributes could be added for product: {$product['stockCode']}");
        }
        return $attributes;
    }

    private function parseDimensions($value): ?array
    {
        $normalized = strtolower(trim($value));
        $normalized = str_replace(',', '.', $normalized);
        $normalized = preg_replace('/[^0-9.x]/', '', $normalized);
        $parts = explode('x', $normalized);
        if (count($parts) >= 2 && is_numeric($parts[0]) && is_numeric($parts[1])) {
            return [
                'width' => (int) round((float) $parts[0]),
                'height' => (int) round((float) $parts[1]),
            ];
        }
        if (count($parts) === 1 && is_numeric($parts[0])) {
            return [
                'width' => (int) round((float) $parts[0]),
                'height' => 0
            ];
        }
        return null;
    }

    /**
     * @param int $attributeId
     * @param string $searchValue
     * @param int $threshold
     * @return array|null
     */
    private function findBestAttributeMatch($attributeId, $searchValue, $isSize): ?array
    {
        $sql = "SELECT attribute_value_id, name FROM iwa_ciceksepeti_category_attributes_values 
            WHERE attribute_id = :attribute_id";
        $allValues = Utility::fetchFromSql($sql, ['attribute_id' => $attributeId]);
        if (empty($allValues)) {
            $this->logger->warning("‚ö†Ô∏è [AttributeMatch] No attribute values found in DB for attributeId: {$attributeId}");
            return null;
        }
        $bestMatch = null;
        $smallestDiff = PHP_INT_MAX;
        foreach ($allValues as $value) {
            $dbValueNormalized = $this->normalizeAttributeValue($value['name']);
            if ($searchValue === $value['name']) {
                $this->logger->info("‚úÖ [AttributeMatch] Exact match: '{$searchValue}' ‚ûú '{$value['name']}' (ID: {$value['attribute_value_id']})");
                return $value;
            }
            $searchValueNormalized = $this->normalizeAttributeValue($searchValue);
            $searchDims = $isSize ? $this->parseDimensions($searchValueNormalized) : null;
            if ($isSize && $searchDims) {
                $dbDims = $this->parseDimensions($dbValueNormalized);
                if ($dbDims) {
                    $widthDiff = $searchDims['width'] - $dbDims['width'];
                    $heightDiff = $searchDims['height'] - $dbDims['height'];
                    $totalDiff = $widthDiff + $heightDiff;
                    $widthOk = $widthDiff >= 0 && $widthDiff <= 25;
                    $heightOk = $searchDims['height'] === 0 || ($heightDiff >= 0 && $heightDiff <= 25);
                    if ($widthOk && $heightOk && $totalDiff < $smallestDiff) {
                        $smallestDiff = $totalDiff;
                        $bestMatch = $value;
                    }
                }
            }
        }
        if ($bestMatch) {
            $this->logger->info("üîç [AttributeMatch] Approximate match: '{$searchValue}' ‚ûú '{$bestMatch['name']}' (ID: {$bestMatch['attribute_value_id']})");
        } else {
            $this->logger->notice("‚ùå [AttributeMatch] No match found for: '{$searchValueNormalized}' (attributeId: {$attributeId})");
        }
        return $bestMatch;
    }

    /**
     * @param string $value
     * @return string
     */
    private function normalizeAttributeValue($value): string
    {
        if (!empty($value)) {
            $value = trim($value);
            $search = ['ƒ±', 'ƒü', '√º', '≈ü', '√∂', '√ß', 'ƒ∞', 'ƒû', '√ú', '≈û', '√ñ', '√á'];
            $replace = ['i', 'g', 'u', 's', 'o', 'c', 'i', 'g', 'u', 's', 'o', 'c'];
            $value = str_replace($search, $replace, $value);
            $value = mb_strtolower($value, 'UTF-8');
        }
        return $value;
    }

    public function categoryAttributeUpdate($marketplaceId): void
    {
        $this->ciceksepetiConnector = new CiceksepetiConnector(Marketplace::getById($marketplaceId));
        echo "Ciceksepeti Connector Created\n";
        $this->ciceksepetiConnector->downloadCategories();
        echo "Ciceksepeti Downloaded Categories\n";
        $categoryIdList = $this->getCiceksepetiListingCategoriesIdList();
        echo "Ciceksepeti Category List Updated\n";
        foreach ($categoryIdList as $categoryId) {
            $this->ciceksepetiConnector->getCategoryAttributesAndSaveDatabase($categoryId);
        }
        echo "Ciceksepeti Category Attributes Updated\n";
    }

    public function getCiceksepetiCategoriesDetails(): false|array|string
    {
        $categoryIdList = $this->getCiceksepetiListingCategoriesIdList();
        if (empty($categoryIdList)) {
            return [];
        }
        $inClause = implode(',', array_fill(0, count($categoryIdList), '?'));
        $sql = "SELECT * FROM iwa_ciceksepeti_categories WHERE id IN ($inClause)";
        $categories = Utility::fetchFromSql($sql, $categoryIdList);
        return json_encode($categories, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    }

    public function getCiceksepetiListingCategoriesIdList(): array
    {
        $sql = "SELECT oo_id FROM `object_query_varyantproduct` WHERE marketplaceType = 'Ciceksepeti'";
        $ciceksepetiVariantIds = Utility::fetchFromSql($sql);
        if (!is_array($ciceksepetiVariantIds) || empty($ciceksepetiVariantIds)) {
            return [];
        }
        $categoryIdList = [];
        foreach ($ciceksepetiVariantIds as $ciceksepetiVariantId) {
            $variantProduct = VariantProduct::getById($ciceksepetiVariantId['oo_id']);
            if (!$variantProduct instanceof VariantProduct) {
                continue;
            }
            $apiData = json_decode($variantProduct->jsonRead('apiResponseJson'), true);
            $categoryIdList[] = $apiData['categoryId'];
        }
        return array_unique($categoryIdList);
    }

}
